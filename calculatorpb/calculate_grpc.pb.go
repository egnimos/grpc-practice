// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package calculatorpb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalServiceClient is the client API for CalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalServiceClient interface {
	//unary
	Calculate(ctx context.Context, in *CalRequest, opts ...grpc.CallOption) (*CalResponse, error)
	//server streaming
	CalculateManyTimes(ctx context.Context, in *CalManyTimesRequest, opts ...grpc.CallOption) (CalService_CalculateManyTimesClient, error)
}

type calServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalServiceClient(cc grpc.ClientConnInterface) CalServiceClient {
	return &calServiceClient{cc}
}

func (c *calServiceClient) Calculate(ctx context.Context, in *CalRequest, opts ...grpc.CallOption) (*CalResponse, error) {
	out := new(CalResponse)
	err := c.cc.Invoke(ctx, "/calculator.CalService/calculate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calServiceClient) CalculateManyTimes(ctx context.Context, in *CalManyTimesRequest, opts ...grpc.CallOption) (CalService_CalculateManyTimesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalService_ServiceDesc.Streams[0], "/calculator.CalService/calculateManyTimes", opts...)
	if err != nil {
		return nil, err
	}
	x := &calServiceCalculateManyTimesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalService_CalculateManyTimesClient interface {
	Recv() (*CalManyTimesResponse, error)
	grpc.ClientStream
}

type calServiceCalculateManyTimesClient struct {
	grpc.ClientStream
}

func (x *calServiceCalculateManyTimesClient) Recv() (*CalManyTimesResponse, error) {
	m := new(CalManyTimesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalServiceServer is the server API for CalService service.
// All implementations must embed UnimplementedCalServiceServer
// for forward compatibility
type CalServiceServer interface {
	//unary
	Calculate(context.Context, *CalRequest) (*CalResponse, error)
	//server streaming
	CalculateManyTimes(*CalManyTimesRequest, CalService_CalculateManyTimesServer) error
	mustEmbedUnimplementedCalServiceServer()
}

// UnimplementedCalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalServiceServer struct {
}

func (UnimplementedCalServiceServer) Calculate(context.Context, *CalRequest) (*CalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Calculate not implemented")
}
func (UnimplementedCalServiceServer) CalculateManyTimes(*CalManyTimesRequest, CalService_CalculateManyTimesServer) error {
	return status.Errorf(codes.Unimplemented, "method CalculateManyTimes not implemented")
}
func (UnimplementedCalServiceServer) mustEmbedUnimplementedCalServiceServer() {}

// UnsafeCalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalServiceServer will
// result in compilation errors.
type UnsafeCalServiceServer interface {
	mustEmbedUnimplementedCalServiceServer()
}

func RegisterCalServiceServer(s grpc.ServiceRegistrar, srv CalServiceServer) {
	s.RegisterService(&CalService_ServiceDesc, srv)
}

func _CalService_Calculate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalServiceServer).Calculate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.CalService/calculate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalServiceServer).Calculate(ctx, req.(*CalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalService_CalculateManyTimes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CalManyTimesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalServiceServer).CalculateManyTimes(m, &calServiceCalculateManyTimesServer{stream})
}

type CalService_CalculateManyTimesServer interface {
	Send(*CalManyTimesResponse) error
	grpc.ServerStream
}

type calServiceCalculateManyTimesServer struct {
	grpc.ServerStream
}

func (x *calServiceCalculateManyTimesServer) Send(m *CalManyTimesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CalService_ServiceDesc is the grpc.ServiceDesc for CalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.CalService",
	HandlerType: (*CalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "calculate",
			Handler:    _CalService_Calculate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "calculateManyTimes",
			Handler:       _CalService_CalculateManyTimes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "calculator/calculatorpb/calculate.proto",
}
